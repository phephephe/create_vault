---
- name: If user permission not received as yes, fail
  fail:
    msg: "The vault files and password files not deleted and new ones not generated. No permission received."
  when: "not 'yes' in delete_permission"

- name: "This will overwrite the vault and vault password files are you sure to continue"
  pause:
    prompt: |
          ***************************************************
                           ARE YOU SURE? 
                           Yes, press 'Enter'
                  If not then ctrl+C then 'A' = abort
                  If you are sure then (ctrl+C then 'C' = continue
          ***************************************************

# Generate vault password
- name: Generate vault password, if not present
  set_fact:
    vault_passwd: "{{Â lookup('password', '/dev/null chars=ascii_letters,digits,punctuation length=62' ) }}"

- name: Copy Vault 1 password template to localhost
  template:
    src: '../templates/vault_passwd.yml.j2'
    dest: "{{ target_vault_password_file }}"
    mode: '640'
  no_log: 'yes' 
  when: not gpg_passwordfile_enabled 

- name: Make sure that any clear password files are not present when gpg is used
  file:
    path: "{{ target_vault_password_file }}"
    state: 'absent'
  when: gpg_passwordfile_enabled

- name: Copy Vault clear template to localhost
  template:
    src: '../templates/vault.yml.j2'
    dest: "{{ target_inventory }}/{{ taget_vault }}"
    mode: '640'
  no_log: 'yes'  

- name: Copy ansible-vault.sh to be used with gpg
  template:
    src: '../templates/gpg_ansible-vault.sh.j2'
    dest: "~/.ansible-vault.sh"
    mode: '750'
  when: gpg_passwordfile_enabled

- name: Copy ansible-vault.sh to be used with clear text
  template:
    src: '../templates/txt_ansible-vault.sh.j2'
    dest: "~/.ansible-vault.sh"
    mode: '750'
  when: not gpg_passwordfile_enabled

- name: Make correctly formated recipient list string
  set_fact:
    recipient_list_str: "{{ recipient_list_str | default('') }} --recipient {{ item }}"
  loop: "{{ gpg_encryption_recipient_list }}"
  when: gpg_passwordfile_enabled

- debug:
    var: recipient_list_str
  when: gpg_passwordfile_enabled

- name: GPG encrypt the password file
  shell: "echo '{{ vault_passwd }}' | {{ gpg_command }} --encrypt {{ recipient_list_str }} -o {{ target_vault_password_file }}.gpg"
  no_log: 'yes' 
  when: gpg_passwordfile_enabled

- name: Encrypt the Ansible vault by using clear txt password file
  command: 'ansible-vault encrypt --vault-password-file {{ target_vault_password_file }} --encrypt-vault-id default {{ target_inventory }}/{{ taget_vault }}'
  no_log: 'no' 
  when: not gpg_passwordfile_enabled

- name: Encrypt the Ansible vault using pgp encrypted password file
  command: 'ansible-vault encrypt --vault-password-file "~/.ansible-vault.sh" --encrypt-vault-id default {{ target_inventory }}/{{ taget_vault }}'
  no_log: 'no' 
  when: gpg_passwordfile_enabled

- pause:
    seconds: 1
    prompt: |
          =========================
          New clear text Ansible Vault password file created with a random password.
          New Ansible Vault created with generated random passwords.
          =========================
  when: not gpg_passwordfile_enabled 

- pause:
    seconds: 1
    prompt: |
          =========================
          New GPG encrypted Ansible Vault password file created with a random password.
          New Ansible Vault created with generated random passwords.
          =========================
  when: gpg_passwordfile_enabled        